# handlers/review.py
from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    ConversationHandler, CommandHandler,
    MessageHandler, filters, ContextTypes
)
import config
from db import save_review
import re

# –°–æ—Å—Ç–æ—è–Ω–∏—è: –ø–æ —á–∏—Å–ª—É –≤–æ–ø—Ä–æ—Å–æ–≤ + CONFIRM
(
    ASK_PHONE, ASK_CITY, ASK_NAME, ASK_STATUS,
    ASK_HEATING, ASK_ELECTRICITY, ASK_GAS, ASK_WATER,
    ASK_NOISE, ASK_MGMT, ASK_RENT, ASK_LIKES,
    ASK_ANNOY, ASK_RECOMMEND, CONFIRM
) = range(len(config.QUESTIONS) + 1)

# –ó–∞–ø—É—Å–∫ –æ–ø—Ä–æ—Å–∞
async def start_review(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['answers'] = {}
    context.user_data['current_q'] = 0
    q = config.QUESTIONS[0]
    await update.message.reply_text(q['text'], reply_markup=ReplyKeyboardRemove())
    return ASK_PHONE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def ask_field(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã "–ù–∞–∑–∞–¥" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤ –º–µ–Ω—é
    if update.message.text.strip() == '–ù–∞–∑–∞–¥':
        from handlers.start import start
        await start(update, context)
        return ConversationHandler.END

    idx = context.user_data['current_q']
    q = config.QUESTIONS[idx]
    text = update.message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if idx == ASK_PHONE:
        if not re.match(r'^(?:\+7|8)\d{10}$', text):
            await update.message.reply_text(
                "‚ùóÔ∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX"
            )
            return ASK_PHONE
        context.user_data['answers'][q['key']] = text

    # –í—ã–±–æ—Ä –æ–ø—Ü–∏–∏
    elif q.get('type') == 'choice':
        if text not in q['options']:
            kb = [[opt] for opt in q['options']]
            markup = ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(
                "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.",
                reply_markup=markup
            )
            return idx
        context.user_data['answers'][q['key']] = text

    # –†–µ–π—Ç–∏–Ω–≥ 1‚Äì5
    elif q.get('type') == 'rating':
        if not text.isdigit() or not 1 <= int(text) <= 5:
            await update.message.reply_text("‚ùóÔ∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 5")
            return idx
        context.user_data['answers'][q['key']] = int(text)

    # –¢–µ–∫—Å—Ç
    else:
        context.user_data['answers'][q['key']] = text

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    idx += 1
    context.user_data['current_q'] = idx

    if idx < len(config.QUESTIONS):
        next_q = config.QUESTIONS[idx]
        if next_q.get('type') == 'choice':
            kb = [[opt] for opt in next_q['options']]
            markup = ReplyKeyboardMarkup(kb, resize_keyboard=True, one_time_keyboard=True)
            await update.message.reply_text(next_q['text'], reply_markup=markup)
        else:
            await update.message.reply_text(next_q['text'], reply_markup=ReplyKeyboardRemove())
        return idx

    # –°–≤–æ–¥–∫–∞
    labels = {
        'phone': 'üì± –¢–µ–ª–µ—Ñ–æ–Ω', 'city': 'üèôÔ∏è –ì–æ—Ä–æ–¥', 'complex_name': 'üèòÔ∏è –ñ–ö',
        'status': 'üë§ –°—Ç–∞—Ç—É—Å', 'heating': 'üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ', 'electricity': '‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
        'gas': 'üî• –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', 'water': 'üíß –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ', 'noise': 'üîä –®—É–º',
        'mgmt': 'üè¢ –£–ö (–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫)', 'rent_price': 'üí∞ –ê—Ä–µ–Ω–¥–∞', 'likes': 'üëç –ü–ª—é—Å—ã',
        'annoy': 'üëé –ú–∏–Ω—É—Å—ã', 'recommend': '‚úÖ –°–æ–≤–µ—Ç—É—é'
    }
    lines = [f"{labels.get(k)}: {v}" for k,v in context.user_data['answers'].items()]
    summary = "\n".join(lines)

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    kb = ReplyKeyboardMarkup([['–î–∞','–ù–µ—Ç']], resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(summary + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∫—É:", reply_markup=kb)
    return CONFIRM

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
async def finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message.text.lower() == '–¥–∞':
        save_review(context.user_data['answers'])
        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ, –æ—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!', reply_markup=ReplyKeyboardRemove())
    else:
        await update.message.reply_text('–û—Ç–∑—ã–≤ –æ—Ç–º–µ–Ω—ë–Ω.', reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

review_conv_handler = ConversationHandler(
    entry_points=[MessageHandler(filters.Regex('^–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤$'), start_review)],
    states={
        **{i: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_field)] for i in range(len(config.QUESTIONS))},
        CONFIRM: [MessageHandler(filters.Regex('^(–î–∞|–ù–µ—Ç)$'), finish)]
    },
    fallbacks=[CommandHandler('cancel', lambda u,c: ConversationHandler.END)]
)
