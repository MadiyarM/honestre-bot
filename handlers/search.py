from telegram import Update, ReplyKeyboardRemove, ReplyKeyboardMarkup
from telegram.ext import (
    MessageHandler, filters, ContextTypes, ConversationHandler
)
import db  # –∑–¥–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–∑—ã–≤–æ–≤

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
SEARCH_QUERY = 0

# –ö–Ω–æ–ø–∫–∏ –ø—Ä–∏ –æ—à–∏–±–∫–µ –∏–ª–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
BACK_KB = ReplyKeyboardMarkup(
    [["–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥"], ["–ù–∞–∑–∞–¥"]],
    resize_keyboard=True,
    one_time_keyboard=True
)

async def start_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –¢—Ä–∏–≥–≥–µ—Ä: –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–£–∑–Ω–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –ñ–ö".
    –°–ø—Ä–∞—à–∏–≤–∞–µ–º —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∑–≤–∞–Ω–∏–µ –ñ–ö –¥–ª—è –ø–æ–∏—Å–∫–∞.
    """
    await update.message.reply_text(
        "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return SEARCH_QUERY

async def handle_search_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞, –∏—â–µ–º –æ—Ç–∑—ã–≤—ã –≤ –ë–î –∏ –≤—ã–≤–æ–¥–∏–º –∏—Ö.
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥" –∏ "–ù–∞–∑–∞–¥".
    """
    text = update.message.text.strip()

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –≤—ã–π—Ç–∏ –≤ –º–µ–Ω—é
    if text == "–ù–∞–∑–∞–¥":
        from handlers.start import start
        await start(update, context)
        return ConversationHandler.END

    # –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –≤–≤–æ–¥
    if text == "–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –≤–≤–æ–¥":
        await update.message.reply_text(
            "üîç –í–≤–µ–¥–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∂–∏–ª–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞:",
            reply_markup=ReplyKeyboardRemove()
        )
        return SEARCH_QUERY

    # –û–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    reviews = db.get_reviews_by_complex(text)
    if not reviews:
        await update.message.reply_text(
            f"‚ùå –û—Ç–∑—ã–≤–æ–≤ –ø–æ –ñ–ö '{text}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
        )
        await update.message.reply_text(
            "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é:",
            reply_markup=BACK_KB
        )
        return SEARCH_QUERY

    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ - –≤—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    for r in reviews:
        name = r.get('complex_name', '‚Äî')
        city = r.get('city', '‚Äî')
        await update.message.reply_text(f"üè¢ –ñ–ö {name}, {city}")
        await update.message.reply_text("üìç –°–µ–π—Ñ—É–ª–ª–∏–Ω–∞, 51")

        # –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
        labels = {
            'water': 'üíß –í–æ–¥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
            'electricity': '‚ö°Ô∏è –≠–ª–µ–∫—Ç—Ä–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
            'gas': 'üî• –ì–∞–∑–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ',
            'noise': 'üîä –®—É–º',
            'heating': 'üî• –û—Ç–æ–ø–ª–µ–Ω–∏–µ',
            'mgmt': 'üè¢ –£–ö (–∑–∞—Å—Ç—Ä–æ–π—â–∏–∫)'
        }
        keys = list(labels.keys())
        lines = ["üîë –ö–ª—é—á–µ–≤—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏"]
        total = 0
        for key in keys:
            raw = r.get(key, 0)
            try:
                val = int(raw)
            except (TypeError, ValueError):
                val = 0
            stars = '‚òÖ' * val + '‚òÜ' * (5 - val)
            line_label = labels[key]
            lines.append(f"‚Ä¢ {line_label}: {stars} ({val}/5)")
            total += val
        avg = total / len(keys) if keys else 0
        lines.append(f"\n–í—ã–≤–æ–¥: {avg:.1f}")

        await update.message.reply_text("\n".join(lines))

    # –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
    from handlers.start import start
    await start(update, context)
    return ConversationHandler.END

# ConversationHandler –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–∑—ã–≤–æ–≤
search_conv_handler = ConversationHandler(
    entry_points=[
        MessageHandler(filters.Regex('^–£–∑–Ω–∞—Ç—å –æ—Ç–∑—ã–≤ –æ –ñ–ö$'), start_search)
    ],
    states={
        SEARCH_QUERY: [
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_query)
        ]
    },
    fallbacks=[
        MessageHandler(filters.Regex('^–ù–∞–∑–∞–¥$'), handle_search_query)
    ]
)
